##########################################
# 実現したいこと
##########################################
田中のAWSアカウント内（カサレアルAWS）ですべて完結
AL2023 + deepsecurityのインストールを試す → AMIが自己所有（プライベート）できる
※自己所有トレンドマイクロが無償版であれば
うまく行けばテクマトリックスのセキュリティ製品を使用したgoldenimageを作成

ImageBuilder: インストールのみ（DeepSecurity Agent）
    ↓
EC2起動: S3からdeploy_v1es.shを取得し、アクティベーションのみ実行


##########################################
# エラー
##########################################
install.log の内容から Deep Security Agent のインストール自体は成功しているが、
サービス ds_agent.service が systemd に認識されておらず、エージェントが起動できていない状態

ds_agent.service が存在しない
Unit ds_agent.service could not be found.
このエラーが繰り返し出ており、systemctl で起動できるサービスが存在しない

EC2 起動時の User Data で使う分には成功するが、ゴールデンイメージ（AMI）を作成して起動したインスタンスでは失敗する
↓
①	UserData は再実行されない（EC2 起動後の初回インスタンスのみ）
②	/opt/TrendMicro や /tmp/.dsa-deploy、ログファイルなどが AMI に残っているため、再インストールに失敗
③	/opt/ds_agent/sendCommand など一部コマンドが エージェント起動前に存在しない
④	AWS の cloud-init が再初期化されていないため、UserData スクリプトが実行されない

AMI 作成前に上記クリーンアップスクリプトを必ず実行する

##########################################
# ゴール
##########################################
goldenimageを使ったEC2の起動 → deepesecurityが動作する（サーバーと通信ができるとこまで）

##########################################
# ゴールデンイメージ aws cli作成
##########################################

# 東京リージョン（ap-northeast-1）の最新 Amazon Linux 2023（x86_64）AMI 
aws ec2 describe-images \
  --owners amazon \
  --filters "Name=name,Values=al2023-ami-*-x86_64" "Name=architecture,Values=x86_64" \
  --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' \
  --output text
ami-0482bfccb0592593d

# 配信スクリプトをdeploy_v1es.sh名で作成し、s3バケットに格納する
aws s3 cp deploy_v1es.sh s3://deepsecurity-test/scripts/deploy_v1es.sh
aws s3 cp agent.rpm s3://deepsecurity-test/scripts/agent.rpm
aws s3 cp agent.rpm s3://deepsecurity-test/packages/agent.rpm

#=========================================
# EC2を起動するためのUserdataを作成
#=========================================
cat << 'EOF' > userdata.sh
#!/bin/bash
set -eux

# ログディレクトリ作成
mkdir -p /var/log/v1es
exec > >(tee -a /var/log/v1es/install.log) 2>&1

# スクリプトを S3 から取得（あなたのバケットとパスに応じて変更）
aws s3 cp s3://deepsecurity-test/scripts/deploy_v1es.sh /tmp/deploy_v1es.sh
chmod +x /tmp/deploy_v1es.sh

# インストールスクリプトの実行
# /tmp/deploy_v1es.sh
EOF

# 自動起動の有効化と起動
systemctl enable ds_agent
systemctl start ds_agent
systemctl status ds_agent

#=========================================
# EC2 インスタンス起動
#=========================================
INSTANCE_ID=$(aws ec2 run-instances \
  --image-id ami-0482bfccb0592593d \
  --instance-type t3.medium \
  --iam-instance-profile Name=ec2-golden-role \
  --key-name deepsecurity-tanaka \
  --user-data fileb://userdata.sh \
  --security-group-ids deepsecurity-tanaka \
  --block-device-mappings '[{"DeviceName":"/dev/xvda","Ebs":{"VolumeSize":20,"VolumeType":"gp3","DeleteOnTermination":true}}]' \
  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=deepsecurity-golden}]' \
  --query 'Instances[0].InstanceId' \
  --output text)

#=========================================
# 起動を待つ
#=========================================
aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID

#=========================================
# Golden AMI を作成
#=========================================
GOLDEN_IMAGE_ID=$(aws ec2 create-image \
  --instance-id $INSTANCE_ID \
  --name "al2023-deepsecurity-golden-$(date +%Y%m%d-%H%M)" \
  --description "AL2023 with VisionOne Agent pre-installed" \
  --no-reboot \
  --query 'ImageId' \
  --output text)

#=========================================
# 元のインスタンスを削除
#=========================================
aws ec2 terminate-instances --instance-ids $INSTANCE_ID

#=========================================
# この AMI を使って EC2 インスタンスを起動
#=========================================
aws ec2 run-instances \
  --image-id $GOLDEN_IMAGE_ID \
  --instance-type t3.medium \
  --key-name deepsecurity-tanaka \
  --security-group-ids deepsecurity-tanaka \
  --iam-instance-profile Name=ec2-golden-role \
  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=from-golden-ami}]' \
  --output table


ssh -i /c/Users/tanaka/goldenimage/deepsecurity-tanaka.pem ec2-user@57.183.19.211

scp -i /c/Users/tanaka/goldenimage/deepsecurity-tanaka.pem TMServerAgent_Amazon_Linux_2023_x86_64_deepsecurity_tanaka.tar ec2-user@35.78.221.168:/home/ec2-user

scp ec2-user@35.78.221.168:/home/ec2-user/packages/30dbad46-b227-45bd-a758-e620b01c69b0/agent.rpm /c/Users/tanaka/goldenimage/


# オプション：起動時にアクティベーションしたい場合
Golden AMI は “登録だけしない” 状態にし、実運用インスタンスでは UserData で登録だけ実行させる
#!/bin/bash
/opt/ds_agent/dsa_control -a dsm://agents.deepsecurity.trendmicro.com:443/ \
  "tenantID:6c6e7eee-bc40-4d01-a6e7-1c515ff961c4" \
  "token:eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJjaWQiOiI2YzZlN2VlZS1iYzQwLTRkMDEtYTZlNy0xYzUxNWZmOTYxYzQiLCJjcGlkIjoic3ZwIiwicHBpZCI6InVpYyIsIml0IjoxNzUzMjM3MjYzLCJ1aWQiOiIiLCJwbCI6IntcImZxZG5cIjpcImFwaS54ZHIudHJlbmRtaWNyby5jby5qcFwiLFwidHlwZVwiOlwiZW5yb2xsbWVudFwiLFwicHJvZHVjdElkXCI6XCJwZHNcIixcImlzVjFFU1wiOnRydWUsXCJvcGVyYXRpb25cIjpcImFkZFwifSIsImV0IjoxNzUzMzIzNjYyLCJ0b2tlblVzZSI6ImN1c3RvbWVyIn0.jDDLpgbflrwdQMnEkyaQyd4u_UL5VoNrs-1G3nLnaZxNmYzPSXTIIpF3IbjLBPjWKTOOUyKBqEdWEiS6vE308BomDmomQybQrUIxwhKb3cxLnUKhmzoHSdvd-qa8Znmlz03--481gb1z8NNPpBULbZCT7tFo5rVXR8f5BQ-uJ-EsVsGnza2DM3ll4EGznePPz3z4uxS_i_v5QJZc87GZUnbDDLPXc02a1hLEv0b7rLywTfd374tVPcviPamg-jketVzkOJwyV4mzL4ZxRWKc49EfWDhscrPtJTrmruetp3Y808eKkkvw0wQAsC1i-2tr35vyf-2zUgdGh8LPWqqsGNtdzf3Ewp9AfVI9ua1-doc8x1YzCCsV7EzrgUTzVH_DllLa3ssA1QA16XWCuTi1CjpBuXiId6CNS0tagf92HjkgawaOCiE-K1G0ASjqdhue6ZyVORFbM3R3SuFSN_U5CYboK6ycJhWzj99gY0uFVUMxatB6lJOoQ5OfSUSRjh3vBJLqT19sy68PEoA8il1474VeO6O0BrkwMvBAP0p4aV-HGyqYjlIwG312txMnJ-3SAxZFRorVFLuFf1280cEWazHKuGaoSG2ouoyqWZ0Qpwd0kOifM-IC0rfpwIUqtAT35h01zfB7s_c0BXdMNarzKohyq92AG5bFyb9lvNvTc_8"


#cloud-config
runcmd:
  - mkdir -p /var/log/v1es
  - echo "[INFO] Downloading install script from S3..."
  - aws s3 cp s3://deepsecurity-test/scripts/deploy_v1es.sh /tmp/deploy_v1es.sh
  - chmod +x /tmp/deploy_v1es.sh
  - echo "[INFO] Executing install script..."
  - /tmp/deploy_v1es.sh



#cloud-config
write_files:
  - path: /tmp/setup-dsa.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      exec > >(tee -a /var/log/dsa-activation.log) 2>&1
      echo "[INFO] Starting Deep Security Agent activation..."

      SETPOLICY=10
      SETDIR=/opt/ds_agent/
      SETURL="dsa_control -a dsm://agents.workload.jp-1.cloudone.trendmicro.com:443/ tenantID:59BF1FDF-93C7-286F-0B66-2972F15A5096 token:25EA1FE4-1DD1-6ABE-50E3-5CADCA52D5C2"

      SBID="S22067B001_management"
      GID_A=2265
      GID_B=2266
      RLYID=3

      DSNAME=$(hostname)
      DISPLAY="${SBID}_${DSNAME}"
      ACTIVATIONURL="${SETDIR}${SETURL}"
      SETGROUPID=${GID_A}

      echo "ACTIVATIONURL=${ACTIVATIONURL}"
      echo "SETPOLICY=${SETPOLICY}"
      echo "RLYID=${RLYID}"
      echo "SETGROUPID=${SETGROUPID}"
      echo "DISPLAY=${DISPLAY}"

      rm -rf /tmp/ignore_agent_installer_check
      rm -rf /etc/use_dsa_with_iptables

      echo "[INFO] Resetting DSA..."
      ${SETDIR}dsa_control -r
      sleep 5

      echo "[INFO] Activating DSA..."
      touch /tmp/ignore_agent_installer_check

      eval ${ACTIVATIONURL} "policyid:${SETPOLICY}" "relaygroupid:${RLYID}" "groupid:${SETGROUPID}" "hostname:${DISPLAY}"

      touch /etc/use_dsa_with_iptables

      echo "[INFO] DSA activation complete."
      sleep 5

runcmd:
  - bash /tmp/setup-dsa.sh



##########################################
# EC2 Image Builder
##########################################

#=========================================
# コンポーネント（インストール処理を行うスクリプト）
# レシピカードの作成 DeepSecurityをどうやって入れるかを定義 
#=========================================
cat << 'EOF' > deepsecurity-component.yml
name: install-deepsecurity
description: Install Deep Security Vision One Agent
schemaVersion: 1.0
phases:
  - name: build
    steps:
      - name: InstallAgent
        action: ExecuteBash
        inputs:
          commands:
            - echo "[INFO] Creating log directory..."
            - mkdir -p /var/log/v1es
            - echo "[INFO] Redirecting output to log file..."
            - exec > >(tee -a /var/log/v1es/install.log) 2>&1
            - echo "[INFO] Installing dependency for Amazon Linux 2023..."
            - dnf install -y libxcrypt-compat
            - echo "[INFO] Downloading Deep Security Agent from S3..."
            - aws s3 cp s3://deepsecurity-test/packages/agent.rpm /tmp/agent.rpm
            - echo "[INFO] Changing permissions of the agent package..."
            - chmod 744 /tmp/agent.rpm
            - echo "[INFO] Installing Deep Security Agent..."
            - rpm -ihv /tmp/agent.rpm
            - echo "[INFO] Checking agent status..."
            - systemctl status ds_agent || echo "[WARN] ds_agent service not available yet"
            - echo "[INFO] Installation script completed."
EOF

cat << 'EOF' > deepsecurity-component.yml
name: install-deepsecurity
description: Install Deep Security Vision One Agent (no activation)
schemaVersion: 1.0
phases:
  - name: build
    steps:
      - name: InstallAgent
        action: ExecuteBash
        inputs:
          commands:
            - mkdir -p /opt/scripts
            - mkdir -p /var/log/v1es
            - |
              cat << 'EOT' > /opt/scripts/agent-install.sh
              #!/bin/bash
              echo "[INFO] Starting..."
              #!/bin/bash

              ## Variables
              INSTALL_LOG="/tmp/v1es_install.log"

              # POLICY_ID, GROUP_ID and RELAY_GROUP_ID are for SWP configuration
              POLICY_ID=0 # 0 means no specific choice
              GROUP_ID=0 # 0 means no specific choice
              RELAY_GROUP_ID=0 # 0 means no specific choice

              ## Pre-Check
              # Check whether /tmp is writable
              if [[ ! -w /tmp ]]; then
                  echo "[ERROR] /tmp is not writable. Please check the permission of /tmp."
                  exit 1
              fi

              # Check whether the script is running as root
              if [[ $(/usr/bin/id -u) -ne 0 ]]; then
                  echo "[ERROR] You are not running as the root user.  Please try again with root privileges."
                  echo "$(date) [ERROR] You are not running as the root user.  Please try again with root privileges." >> $INSTALL_LOG
                  exit 1
              fi

              # Check whether curl is installed
              if ! type curl >/dev/null 2>&1; then
                  echo "[ERROR] Please install curl before running this script."
                  echo "$(date) [ERROR] Please install curl before running this script." >> $INSTALL_LOG
                  exit 1
              fi

              # Check whether curl supports tls v1.2
              CURL_TLS_VERSION=$(curl --help tls | grep tlsv1.2)
              if [[ -z "$CURL_TLS_VERSION" ]]; then
                  echo "[ERROR] Your version of curl does not support TLS v1.2. Please update curl."
                  echo "$(date) [ERROR] Your version of curl does not support TLS v1.2. Please update curl." >> $INSTALL_LOG
                  exit 1
              fi
              echo "[INFO] curl support tls v1.2."
              echo "$(date) [INFO] curl support tls v1.2." >> $INSTALL_LOG

              # Check whether tar is installed
              if ! type tar >/dev/null 2>&1; then
                  echo "[ERROR] Please install tar before running this script."
                  echo "$(date) [ERROR] Please install tar before running this script." >> $INSTALL_LOG
                  exit 1
              fi

              # check if base64 method exists
              if ! type base64 >/dev/null 2>&1; then
                  echo "[ERROR] Please install base64 before running this script."
                  echo "$(date) [ERROR] Please install base64 before running this script." >> $INSTALL_LOG
                  exit 1
              fi

              echo "[INFO] Start deploying."
              echo "$(date) [INFO] Start deploying." >> $INSTALL_LOG

              # PROXY_ADDR_PORT and PROXY_CREDENTIAL define proxy for software download and Agent activation
              PROXY_ADDR_PORT="" 
              PROXY_USERNAME=""
              PROXY_PASSWORD=""

              # HTTP_PROXY is exported for compatibility purpose, remove it if it is not needed in your environment
              PROXY_CREDENTIAL=""
              if [[ ! -z $PROXY_PASSWORD ]]; then
                  PROXY_CREDENTIAL=$(eval echo \"$PROXY_USERNAME:$PROXY_PASSWORD\")
              elif [[ ! -z $PROXY_USERNAME ]]; then
                  PROXY_CREDENTIAL=$(eval echo "$PROXY_USERNAME")
              fi

              if [[ ! -z $PROXY_CREDENTIAL ]]; then
                  export HTTP_PROXY=http://$PROXY_CREDENTIAL@$PROXY_ADDR_PORT/
                  export HTTPS_PROXY=http://$PROXY_CREDENTIAL@$PROXY_ADDR_PORT/
                  echo "[INFO] Use proxy with credentials."
                  echo "$(date) [INFO] Use proxy with credentials." >> $INSTALL_LOG
              elif [[ ! -z $PROXY_ADDR_PORT ]]; then
                  export HTTP_PROXY=http://$PROXY_ADDR_PORT/
                  export HTTPS_PROXY=http://$PROXY_ADDR_PORT/
                  echo "[INFO] Use proxy without credentials."
                  echo "$(date) [INFO] Use proxy without credentials." >> $INSTALL_LOG
              fi

              # configure connection methods
              CONNECT_CONFIG=$(eval echo -n '{\"fps\":[{\"connections\": [{\"type\": \"DIRECT_CONNECT\"}]}]}' | base64 -w 0)
              if [[ $PROXY_ADDR_PORT ]]; then
                  PROXY_CONFIG=$(echo "$PROXY_ADDR_PORT")
                  if [[ $PROXY_USERNAME ]]; then
                      CREDENTIAL_ENCODE=$(eval echo -n \"$PROXY_USERNAME:\" | base64 -w 0)
                      PROXY_CONFIG=$(echo "$CREDENTIAL_ENCODE@$PROXY_ADDR_PORT")
                      if [[ $PROXY_PASSWORD ]]; then
                          CREDENTIAL_ENCODE=$(eval echo -n \"$PROXY_USERNAME:$PROXY_PASSWORD\" | base64 -w 0)
                          PROXY_CONFIG=$(echo "$CREDENTIAL_ENCODE@$PROXY_ADDR_PORT")
                      fi
                  fi
                  CONNECT_CONFIG=$(eval echo -n '{\"fps\":[{\"connections\": [{\"type\": \"USER_INPUT\"}]}]}' | base64 -w 0)
              fi

              # Platform detection
              isRPM=""
              linuxPlatform=""
              archType=""
              CURLOPTIONS="--silent --tlsv1.2 --insecure"
              CUSTOMER_ID="6c6e7eee-bc40-4d01-a6e7-1c515ff961c4"
              XBC_FQDN="api-ap2.xbc.trendmicro.com"

              PLATFORM_DETECTION_URL="https://$XBC_FQDN/apk/platform-detection-script"
              CURLOUT=$(eval curl -w "%{http_code}" -L -H \"X-Customer-Id: $CUSTOMER_ID\" -o /tmp/PlatformDetection $CURLOPTIONS $PLATFORM_DETECTION_URL;)
              err=$?

              if [[ $CURLOUT -ne 200 || $err -ne 0 ]]; then
                  echo "[ERROR] Failed to download the platform detection script. Curl error: $err, HTTP error: $CURLOUT."
                  echo "$(date) [ERROR] Failed to download the platform detection script. Curl error: $err, HTTP error: $CURLOUT." >> $INSTALL_LOG
                  exit 1
              fi

              if [[ -s /tmp/PlatformDetection ]]; then
                  . /tmp/PlatformDetection
              else
                  echo "[ERROR] Failed to download the agent platform detection script."
                  echo "$(date) [ERROR] Failed to download the agent platform detection script." >> $INSTALL_LOG
                  exit 1
              fi

              platform_detect
              if [[ -z "${linuxPlatform}" ]] || [[ -z "${isRPM}" ]]; then
                  echo "[ERROR] ${detectError}"
                  echo "$(date) [ERROR] ${detectError}." >> $INSTALL_LOG
                  exit 1
              fi

              ## Get Installer Package
              INSTALLER_PATH="/tmp/v1es_installer.tgz"

              # Get XBC installer
              GET_INSTALLER_URL="https://$XBC_FQDN/apk/installer"
              HTTP_BODY=""

              if [[ ${archType} == "x86_64" ]]; then
                  HTTP_BODY='{"company_id":"6c6e7eee-bc40-4d01-a6e7-1c515ff961c4","platform":"linux64","scenario_ids":["bc5bde8d-6785-4f4b-b374-b9b58f0a227e","8dbf5a3e-1301-4a5d-9500-ebc9a92576ed"]}'
              elif [[ ${archType} == "aarch64" ]]; then
                  HTTP_BODY='{"company_id":"6c6e7eee-bc40-4d01-a6e7-1c515ff961c4","platform":"linuxaarch64","scenario_ids":["c356ed4c-742b-4841-a390-a92eb953530f","ff6fd948-bc7f-4ec4-add1-905b2cf4e2de"]}'
              else
                  echo "[ERROR] Architecture type ${archType} is not in the supported architecture list."
                  echo "$(date) [ERROR] Architecture type ${archType} is not in the supported architecture list." >> $INSTALL_LOG
                  exit 1
              fi

              echo "[INFO] Start downloading the installer."
              echo "$(date) [INFO] Start downloading the installer." >> $INSTALL_LOG
              CURLOUT=$(eval curl -w "%{http_code}" -L -H \"Content-Type: application/json\" -H \"X-Customer-Id: $CUSTOMER_ID\" -d \'$HTTP_BODY\' -o $INSTALLER_PATH $CURLOPTIONS $GET_INSTALLER_URL;)
              err=$?
              if [[ $CURLOUT -ge 400 || $err -ne 0 ]]; then
                  echo "[ERROR] Failed to download the installer. Curl error: $err, HTTP error: $CURLOUT."
                  echo "$(date) [ERROR] Failed to download the installer. Curl error: $err, HTTP error: $CURLOUT." >> $INSTALL_LOG
                  exit 1
              fi
              echo "[INFO] The installer downloaded."
              echo "$(date) [INFO] The installer downloaded." >> $INSTALL_LOG
              TAR_ARGS="-zxvf"

              ## Install v1es agents
              EXTRATED_DIR="/tmp/v1es"
              mkdir -p $EXTRATED_DIR && tar $TAR_ARGS $INSTALLER_PATH -C $EXTRATED_DIR
              err=$?
              if [[ $err -ne 0 ]]; then
                  echo "[ERROR] Fail to extract the agent installer / full package. Error: $err."
                  echo "$(date) [ERROR] Fail to extract the agent installer / full package. Error: $err." >> $INSTALL_LOG
                  exit 1
              fi

              # set xbc site and scenario IDs
              XBC_ENV="prod-ap2"
              if [[ ${archType} == "x86_64" ]]; then
                  PROPERTY=$(eval echo '{\"xbc_env\": \"$XBC_ENV\", \"xbc_agent_token\": "\"bc5bde8d-6785-4f4b-b374-b9b58f0a227e|8dbf5a3e-1301-4a5d-9500-ebc9a92576ed\"", \"full_package\": true}')
              elif [[ ${archType} == "aarch64" ]]; then
                  PROPERTY=$(eval echo '{\"xbc_env\": \"$XBC_ENV\", \"xbc_agent_token\": "\"c356ed4c-742b-4841-a390-a92eb953530f|ff6fd948-bc7f-4ec4-add1-905b2cf4e2de\"", \"full_package\": true}')
              /
              echo $PROPERTY > $EXTRATED_DIR/.property

              echo "[INFO] Start agent installation"
              echo "$(date) [INFO] Start agent installation" >> $INSTALL_LOG

              echo "[INFO] Agent is installing..."
              echo "$(date) [INFO] Agent is installing..." >> $INSTALL_LOG

              if [[ $PROXY_CONFIG ]]; then
                  echo "[INFO] The agent installation is using a proxy."
                  echo "$(date) [INFO] The agent installation is using a proxy." >> $INSTALL_LOG
                  INSTALL_RESULT=$(eval $EXTRATED_DIR/tmxbc install --proxiesWithCred \'$PROXY_CONFIG\' --connection \'$CONNECT_CONFIG\')
              else
                  echo "[INFO] The agent installation is using a direct connection."
                  echo "$(date) [INFO] The agent installation is using a direct connection." >> $INSTALL_LOG
                  INSTALL_RESULT=$(eval $EXTRATED_DIR/tmxbc install --connection \'$CONNECT_CONFIG\')
              fi

              # check if XBC is installed as usual
              if [[ $? -ne 0 ]]; then
                  echo "[ERROR] Failed to install agent. Error: $INSTALL_RESULT."
                  echo "$(date) [ERROR] Failed to install agent. Error: $INSTALL_RESULT." >> $INSTALL_LOG
                  exit 1
              fi
              echo "[INFO] Agent is installed."
              echo "$(date) [INFO] Agent is installed." >> $INSTALL_LOG

              # check if XBC is registered
              IDENTITY_FILE_PATH="/opt/TrendMicro/EndpointBasecamp/etc/.identity"
              retryCount=0
              maxRetryCount=30
              while [[ ! -a $IDENTITY_FILE_PATH ]]; do
                  echo "[INFO] Waiting for agent to register."
                  echo "$(date) [INFO] Waiting for agent to register." >> $INSTALL_LOG
                  sleep 10
                  retryCount=$((retryCount + 1))
                  if [[ $retryCount -gt maxRetryCount ]]; then
                      echo "[ERROR] Failed to register agent to the backend service. Please see the tmxbc.log for more details."
                      echo "$(date) [ERROR] Failed to register agent to the backend service. Please see the tmxbc.log for more details." >> $INSTALL_LOG
                      exit 1
                  fi
              done
              echo "[INFO] Agent is registered."
              echo "$(date) [INFO] Agent is registered." >> $INSTALL_LOG

              ## SWP installation prerequisites
              STATUS_CMD="systemctl status ds_agent"
              if ! type systemctl >/dev/null 2>&1; then
                  STATUS_CMD="service ds_agent status"
              fi

              ## Check SWP is installed and running
              STATUS=$($STATUS_CMD | grep "running")
              retryCount=0
              maxRetryCount=60
              while [[ -z "$STATUS" ]]; do
                  echo "[INFO] Waiting for Server & Workload Protection to install."
                  echo "$(date) [INFO] Waiting for Server & Workload Protection to install." >> $INSTALL_LOG
                  sleep 10
                  retryCount=$((retryCount + 1))
                  if [[ $retryCount -gt maxRetryCount ]]; then
                      STATUS=$($STATUS_CMD)
                      echo "[ERROR] Failed to install Server & Workload Protection. Error: $STATUS"
                      echo "$(date) [ERROR] Failed to install Server & Workload Protection. Error: $STATUS" >> $INSTALL_LOG
                      exit 1
                  fi
                  STATUS=$($STATUS_CMD | grep "running")
              done
              echo "[INFO] Server & Workload Protection is installed."
              echo "$(date) [INFO] Server & Workload Protection is installed." >> $INSTALL_LOG

              ## Activate SWP
              #ACTIVATION_RESULT=$(/opt/ds_agent/dsa_control -a dsm://agents.workload.jp-1.cloudone.trendmicro.com:443/ "tenantID:..." ...)
              #STATUS=$(echo $ACTIVATION_RESULT | grep 200)
              #if [[ -z "$STATUS" ]]; then
              #    echo "[ERROR] Failed to activate Server & Workload Protection. Error: $ACTIVATION_RESULT"
              #    echo "$(date) [ERROR] Failed to activate Server & Workload Protection. Error: $ACTIVATION_RESULT" >> $INSTALL_LOG
              #    exit 1
              #fi

              #echo "[INFO] Server & Workload Protection is activated."
              echo "$(date) [INFO] Server & Workload Protection is activated." >> $INSTALL_LOG

              echo "[INFO] Finish deploying."
              echo "$(date) [INFO] Finish deploying." >> $INSTALL_LOG
              exit 0
              EOT
            - chmod +x /opt/scripts/agent-install.sh
            - /opt/scripts/agent-install.sh
EOF

cat << 'EOF' > deepsecurity-component.yml
name: install-deepsecurity
description: Install Deep Security Vision One Agent
schemaVersion: 1.0
phases:
  - name: build
    steps:
      - name: InstallAgent
        action: ExecuteBash
        inputs:
          commands:
            - echo "[INFO] Creating log directory..."
            - mkdir -p /var/log/v1es
            - echo "[INFO] Redirecting output to log file..."
            - exec > >(tee -a /var/log/v1es/install.log) 2>&1
            - echo "[INFO] Installing dependency for Amazon Linux 2023..."
            - dnf install -y libxcrypt-compat
            - echo "[INFO] Downloading Deep Security Agent from S3..."
            - aws s3 cp s3://deepsecurity-test/packages/agent.rpm /tmp/agent.rpm
            - echo "[INFO] Changing permissions of the agent package..."
            - chmod 744 /tmp/agent.rpm
            - echo "[INFO] Installing Deep Security Agent..."
            - rpm -ihv /tmp/agent.rpm
            - echo "[INFO] Checking agent status..."
            - systemctl status ds_agent || echo "[WARN] ds_agent service not available yet"
            - echo "[INFO] Installation script completed."
EOF


#=========================================
# Image Builderコンポーネントとして登録
# レシピカードを本に登録
#=========================================
aws imagebuilder create-component \
  --name deepsecurity-install \
  --semantic-version 1.0.0 \
  --platform Linux \
  --data file://deepsecurity-component.yml \
  --description "Install Deep Security Vision One Agent"

#=========================================
# Amazon Linux 2023 の最新AMIをベースに、上記コンポーネントを組み込み
# ベースとなる食材を探して仕入れる
#=========================================
BASE_AMI=$(aws ec2 describe-images \
  --owners amazon \
  --filters "Name=name,Values=al2023-ami-*-x86_64" "Name=architecture,Values=x86_64" \
  --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' \
  --output text)

#=========================================
# イメージレシピ作成
# 食材とレシピを組み合わせて料理の段取り表を作る（材料（AMI）＋レシピ（コンポーネント）を組み合わせた、最終的な手順表）
#=========================================
aws imagebuilder create-image-recipe \
  --name al2023-deepsecurity-recipe \
  --semantic-version 1.0.0 \
  --components '[{"componentArn":"arn:aws:imagebuilder:ap-northeast-1:405501939914:component/deepsecurity-install/1.0.0/1"}]' \
  --parent-image $BASE_AMI \
  --block-device-mappings '[{"deviceName":"/dev/xvda","ebs":{"volumeSize":30,"volumeType":"gp3"}}]' \
  --description "Amazon Linux 2023 with Deep Security Agent"

#=========================================
# インフラストラクチャ設定
# 料理するキッチン（インフラ設定）を用意 どんなキッチンで調理するかを決める コンロの種類（インスタンスタイプ t3.medium）
#=========================================
aws imagebuilder create-infrastructure-configuration \
  --name al2023-deepsecurity-infra \
  --instance-types t3.medium \
  --security-group-ids sg-0b8a440882aa6920f \
  --key-pair deepsecurity-tanaka \
  --instance-profile-name ec2-golden-role \
  --terminate-instance-on-failure

#=========================================
# イメージビルダーのイメージ作成設定（パイプラインの作成）
# 実際の調理スケジュール（パイプライン）を設定 いつどのキッチンでどのレシピを使って料理するか、調理スケジュールを作る
#=========================================
aws imagebuilder create-image-pipeline \
  --name al2023-deepsecurity-pipeline \
  --image-recipe-arn arn:aws:imagebuilder:ap-northeast-1:405501939914:image-recipe/al2023-deepsecurity-recipe/1.0.0 \
  --infrastructure-configuration-arn arn:aws:imagebuilder:ap-northeast-1:405501939914:infrastructure-configuration/al2023-deepsecurity-infra \
  --image-tests-configuration imageTestsEnabled=false,timeoutMinutes=60 \
  --description "Pipeline to build AL2023 + DeepSecurity Golden Image"

#=========================================
# パイプラインの実行コマンド 作成したイメージパイプラインを手動で起動す
# 手動で料理（イメージビルド）を開始する 実際にキッチンで料理を始める（手動調理）
#=========================================
aws imagebuilder start-image-pipeline-execution \
  --image-pipeline-arn arn:aws:imagebuilder:ap-northeast-1:405501939914:image-pipeline/al2023-deepsecurity-pipeline


#=========================================
# 削除
#=========================================
aws imagebuilder delete-image-pipeline \
  --image-pipeline-arn arn:aws:imagebuilder:ap-northeast-1:405501939914:image-pipeline/al2023-deepsecurity-pipeline

aws imagebuilder delete-infrastructure-configuration \
  --infrastructure-configuration-arn arn:aws:imagebuilder:ap-northeast-1:405501939914:infrastructure-configuration/al2023-deepsecurity-infra

aws imagebuilder delete-image-recipe \
  --image-recipe-arn arn:aws:imagebuilder:ap-northeast-1:405501939914:image-recipe/al2023-deepsecurity-recipe/1.0.0

aws imagebuilder delete-component \
  --component-build-version-arn arn:aws:imagebuilder:ap-northeast-1:405501939914:component/deepsecurity-install/1.0.0/1

aws imagebuilder list-images \
  --owner Self

aws imagebuilder delete-image \
  --image-build-version-arn arn:aws:imagebuilder:ap-northeast-1:405501939914:image/al2023-deepsecurity-recipe/1.0.0/1


